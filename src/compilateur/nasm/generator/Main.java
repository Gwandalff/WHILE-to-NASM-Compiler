/*
 * generated by Xtext 2.14.0
 */
package compilateur.nasm.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import compilateur.nasm.NasmStandaloneSetup;
import compilateur.nasm.DefFunction;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

public class Main {

	public static void main(String[] args) {
		if (args.length == 0) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new NasmStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;
	
	public static HashMap<String,String> symboles;
	public static HashMap<String,DefFunction> fonctions;
	public static int numFonc, numSymb, numLab;
	public static String initSymb;

	public static int debugMode;
	
	protected void runGenerator(String[] mainArgs) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(mainArgs[0]), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			System.exit(1);
		}
		
		debugMode = mainArgs[1].equals("TRUE")?1:0;
		
		numSymb = 2;
		numLab = 0;
		numFonc = 0;
		symboles = new HashMap<String, String>();
		fonctions = new HashMap<String, DefFunction>();
		initSymb = "mov 	RBX,0\n";
		symboles.put("nil", "S0");
		symboles.put("int", "S1");
		symboles.put("string", "S2");

		// Configure and start the generator
		fileAccess.setOutputPath("./");
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.generate(resource, fileAccess, context);
	}
	
	public static String newSymb(String s) {
		if (symboles.containsKey(s))
			return symboles.get(s);
		numSymb++;
		String var2 = "S" + numSymb;
		symboles.put(s, var2);
		return var2;
	}
	
	public static String newLab(){
		numLab++;
		return "E" + numLab;
	}
	
	public static List<String> getSortedSymbols() {
		List<String> symbols = new ArrayList<String>(symboles.keySet());
		for(String s:symboles.keySet()) {
			String symbol = symboles.get(s);
			int index = (Integer.parseInt(symbol.substring(1)));
			symbols.set(index, s);
		}
		return symbols;
	}
	public static String createASMSymbols() {
		List<String> symbols = Main.getSortedSymbols();
		int offset = 0;
		for(int i = 0; i< symbols.size(); i++) {
			String symbol = symbols.get(i);
			initSymb += "mov 	RAX,"+ offset +"\n";
			initSymb += "mov 	[RBX+symbols_desc+SYM_OFFSET],RAX\n";
			initSymb += "mov 	RAX,"+ symbol.length() +"\n";
			initSymb += "mov 	[RBX+symbols_desc+SYM_LENGTH],RAX\n";
			initSymb += "add 	RBX,16\n";
			offset += symbol.length();
		}
		initSymb += "mov	RAX,sym_datas	 ; Init the position of the free space for symbols\n";
		initSymb += "add 	RAX,"+offset+"\n";
		initSymb += "mov 	[sym_free],RAX\n";
		String out = String.join("",symbols);
		for(int i = 0;i<2048;i++) out += "0";
		return out;
	}
	
	public static String functionsCodeF(){
		String out = "";
		for (String f : Main.fonctions.keySet()){
			if(!f.equals("main")){
				DefFunction fun = Main.fonctions.get(f);
				out += fun.getName() + ":\n";
				out += "push	RBP\n";
				out += "mov		RBP,RSP\n";
				out += "push	R8\n";
				out += "mov		R8,R9\n";
				out += "add		R9,"+(fun.getNbVar()*8)+"\n";
				out += NasmGeneratorCodeF.compileCodeFonction(fun.getCodeI());
				HashMap<String,String> variables = fun.getVariables();
				for (String vars : variables.keySet()) {
					int nbVar = (Integer.parseInt(variables.get(vars).substring(1))-1)*8;
					out += "mov		RSI," + nbVar + "\n";
					out += "call	chgVar\n";
				}
				out += "call	cleanFun\n";
				out += "mov		R9,R8\n";
				out += "pop		R8\n";
				out += "mov		RSP,RBP\n";
				out += "pop		RBP\n";
				out += "ret\n";
			}
		}
		return out;
	}
}
